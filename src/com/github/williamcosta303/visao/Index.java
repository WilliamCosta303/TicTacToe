package com.github.williamcosta303.visao;

import java.awt.Toolkit;
import javax.swing.JOptionPane;
import java.util.Random;


/*
    Copyright (c) 2016, William A. Costa
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
        * Neither the name of the William A. Costa nor the
          names of its contributors may be used to endorse or promote products
          derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
public class Index extends javax.swing.JFrame {

    int[] valor = {0,0,0,0,0,0,0,0,0};
    int vitorias, derrotas, empates;
    boolean primeiroMovimento;
    
    public Index() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Ba = new javax.swing.JLabel();
        Aa = new javax.swing.JLabel();
        Ca = new javax.swing.JLabel();
        Cb = new javax.swing.JLabel();
        Bb = new javax.swing.JLabel();
        Ab = new javax.swing.JLabel();
        Cc = new javax.swing.JLabel();
        Bc = new javax.swing.JLabel();
        Ac = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mJogo = new javax.swing.JMenu();
        mJogoNovo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mJogoEstatisticas = new javax.swing.JMenuItem();
        mAjuda = new javax.swing.JMenu();
        mAjudaSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TicTacToe");
        setIconImage(Toolkit.getDefaultToolkit().getImage(Index.class.getResource("/com/github/williamcosta303/imagens/icone.png")));
        setResizable(false);

        Ba.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        Ba.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Ba.setText("-");
        Ba.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BaMouseClicked(evt);
            }
        });

        Aa.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        Aa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Aa.setText("-");
        Aa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AaMouseClicked(evt);
            }
        });

        Ca.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        Ca.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Ca.setText("-");
        Ca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CaMouseClicked(evt);
            }
        });

        Cb.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        Cb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Cb.setText("-");
        Cb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CbMouseClicked(evt);
            }
        });

        Bb.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        Bb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bb.setText("-");
        Bb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BbMouseClicked(evt);
            }
        });

        Ab.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        Ab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Ab.setText("-");
        Ab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AbMouseClicked(evt);
            }
        });

        Cc.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        Cc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Cc.setText("-");
        Cc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CcMouseClicked(evt);
            }
        });

        Bc.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        Bc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bc.setText("-");
        Bc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BcMouseClicked(evt);
            }
        });

        Ac.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        Ac.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Ac.setText("-");
        Ac.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AcMouseClicked(evt);
            }
        });

        mJogo.setText("Jogo");

        mJogoNovo.setText("Novo jogo");
        mJogoNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mJogoNovoActionPerformed(evt);
            }
        });
        mJogo.add(mJogoNovo);
        mJogo.add(jSeparator1);

        mJogoEstatisticas.setText("Estat√≠sticas");
        mJogoEstatisticas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mJogoEstatisticasActionPerformed(evt);
            }
        });
        mJogo.add(mJogoEstatisticas);

        jMenuBar1.add(mJogo);

        mAjuda.setText("Ajuda");

        mAjudaSobre.setText("Sobre");
        mAjudaSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAjudaSobreActionPerformed(evt);
            }
        });
        mAjuda.add(mAjudaSobre);

        jMenuBar1.add(mAjuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Aa, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Ba, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Ca, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(Ab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(Bb, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Cb, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Ac, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Bc, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Cc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ba, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Aa, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ca, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bb, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ab, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cb, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bc, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ac, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cc, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AaMouseClicked
        this.realizarJogada(0);
    }//GEN-LAST:event_AaMouseClicked

    private void BaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BaMouseClicked
        this.realizarJogada(1);
    }//GEN-LAST:event_BaMouseClicked

    private void CaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CaMouseClicked
        this.realizarJogada(2);
    }//GEN-LAST:event_CaMouseClicked

    private void AbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AbMouseClicked
        this.realizarJogada(3);
    }//GEN-LAST:event_AbMouseClicked

    private void BbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BbMouseClicked
        this.realizarJogada(4);
    }//GEN-LAST:event_BbMouseClicked

    private void CbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CbMouseClicked
        this.realizarJogada(5);
    }//GEN-LAST:event_CbMouseClicked

    private void AcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AcMouseClicked
        this.realizarJogada(6);
    }//GEN-LAST:event_AcMouseClicked

    private void BcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BcMouseClicked
        this.realizarJogada(7);
    }//GEN-LAST:event_BcMouseClicked

    private void CcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CcMouseClicked
        this.realizarJogada(8);
    }//GEN-LAST:event_CcMouseClicked

    private void mAjudaSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAjudaSobreActionPerformed
        JOptionPane.showMessageDialog(this, "TicTacToe (Jogo-da-velha)\n1.0\n\nDesenvolvido por: William A. Costa\nhttps://github.com/williamcosta303", "SOBRE", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_mAjudaSobreActionPerformed

    private void mJogoEstatisticasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mJogoEstatisticasActionPerformed
        JOptionPane.showMessageDialog(this, "Vit√≥rias: " + this.vitorias + "\nEmpates: " + this.empates + "\nDerrotas: " + this.derrotas, "ESTAT√çSTICAS", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_mJogoEstatisticasActionPerformed

    private void mJogoNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mJogoNovoActionPerformed
        this.novoJogo(true);
    }//GEN-LAST:event_mJogoNovoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }
    
    private boolean jogaCampo(int campo, boolean isComputador){
        this.primeiroMovimento = true;
        if(!isComputador){
            // Jogador
            if(valor[campo] == 0){
                valor[campo] = 1;
                this.atualizarCampos();
                return true;
            } else {
                return false;
            }
        } else {
            // Computador
            if(this.existeCampoVazio()){
                if(valor[campo] == 0){
                    valor[campo] = 2;
                    this.atualizarCampos();
                    return true;
                } else {
                    // N√£o vai perder
                    do{
                        campo = this.geraMovimentoAleatorioComputador();
                    }while(valor[campo] != 0);
                    valor[campo] = 2;
                    this.atualizarCampos();
                    return true;
                }
            } else {
                return true;
            }
        }
    }
    
    private int vezComputador(){
        int resultado = -1; // 8 = debug / padr√£o = -1
        
        // Verificar por jogadas
        boolean chance = false;
        //boolean vouGanhar = false;
        
        for(int i = 2; i > 0; i--){
            //Linha superior
            if(!chance){
                if(valor[0] == i && valor[1] == i && valor[2] == 0){
                    chance = true;
                    resultado = 2;
                } else if(valor[1] == i && valor[2] == i && valor[0] == 0){
                    chance = true;
                    resultado = 0;
                } else if(valor[0] == i && valor[2] == i && valor[1] == 0){
                    chance = true;
                    resultado = 1;
                }
            }

            // Linha do meio
            if(!chance){
                if(valor[3] == i && valor[4] == i && valor[5] == 0){
                    chance = true;
                    resultado = 5;
                } else if(valor[4] == i && valor[5] == i && valor[3] == 0){
                    chance = true;
                    resultado = 3;
                } else if(valor[3] == i && valor[5] == i && valor[4] == 0){
                    chance = true;
                    resultado = 4;
                }
            }

            // Linha inferiror
            if(!chance){
                if(valor[6] == i && valor[7] == i && valor[8] == 0){
                    chance = true;
                    resultado = 8;
                } else if(valor[7] == i && valor[8] == i && valor[6] == 0){
                    chance = true;
                    resultado = 6;
                } else if(valor[6] == i && valor[8] == i && valor[7] == 0){
                    chance = true;
                    resultado = 7;
                }
            }

            // Coluna da esquerda
            if(!chance){
                if(valor[0] == i && valor[3] == i && valor[6] == 0){
                    chance = true;
                    resultado = 6;
                } else if(valor[3] == i && valor[6] == i && valor[0] == 0){
                    chance = true;
                    resultado = 0;
                } else if(valor[0] == i && valor[6] == i && valor[3] == 0){
                    chance = true;
                    resultado = 3;
                }
            }

            // Coluna central
            if(!chance){
                if(valor[1] == i && valor[4] == i && valor[7] == 0){
                    chance = true;
                    resultado = 7;
                } else if(valor[4] == i && valor[7] == i && valor[1] == 0){
                    chance = true;
                    resultado = 1;
                } else if(valor[1] == i && valor[7] == i && valor[4] == 0){
                    chance = true;
                    resultado = 4;
                }
            }

            // Coluna da direita
            if(!chance){
                if(valor[2] == i && valor[5] == i && valor[8] == 0){
                    chance = true;
                    resultado = 8;
                } else if(valor[5] == i && valor[8] == i && valor[2] == 0){
                    chance = true;
                    resultado = 2;
                } else if(valor[2] == i && valor[8] == i && valor[5] == 0){
                    chance = true;
                    resultado = 5;
                }
            }

            // Diagonal para direita
            if(!chance){
                if(valor[0] == i && valor[4] == i && valor[8] == 0){
                    chance = true;
                    resultado = 8;
                } else if(valor[4] == i && valor[8] == i && valor[0] == 0){
                    chance = true;
                    resultado = 0;
                } else if(valor[0] == i && valor[8] == i && valor[4] == 0){
                    chance = true;
                    resultado = 4;
                }
            }

            // Diagonal para esquerda
            if(!chance){
                if(valor[2] == i && valor[4] == i && valor[6] == 0){
                    chance = true;
                    resultado = 6;
                } else if(valor[4] == i && valor[6] == i && valor[2] == 0){
                    chance = true;
                    resultado = 2;
                } else if(valor[2] == i && valor[6] == i && valor[4] == 0){
                    chance = true;
                    resultado = 4;
                }
            }
        }
        
        // N√£o vou perder ou ganhar, aleat√≥rio
        if(!chance){
            resultado = this.geraMovimentoAleatorioComputador();
        }
        
        return resultado;
    }
    
    private boolean existeCampoVazio(){
        // Verifica se existe algum campo vazio
        boolean resultado = false;
        for(int i = 0; i < 9; i++){
            if(valor[i] == 0){
                resultado = true;
            }
        }
        
        return resultado;
    }
    
    private int verificaVitoria(boolean isJogador){
        /**
         * 0 = Sem vit√≥ria
         * 1 = Vit√≥ria jogador
         * 2 = Vit√≥ria computador
         * 3 = Empate
         */
        int idJog;
        boolean ganhou = false;
        boolean empatou = true;
        
        if(isJogador){
            idJog = 1;
        } else {
            idJog = 2;
        }
        
        if(!ganhou){
            if(valor[0] == idJog && valor[1] == idJog && valor[2] == idJog){
                // Verifica linha superior
                ganhou = true;
            } else if(valor[3] == idJog && valor[4] == idJog && valor[5] == idJog){
                // Verifica linha do meio
                ganhou = true;
            } else if(valor[6] == idJog && valor[7] == idJog && valor[8] == idJog){
                // Verificando linha inferior
                ganhou = true;
            } else if(valor[0] == idJog && valor[3] == idJog && valor[6] == idJog){
                // Verificando coluna esquerda
                ganhou = true;
            } else if(valor[1] == idJog && valor[4] == idJog && valor[7] == idJog){
                // Verificando coluna central
                ganhou = true;
            } else if(valor[2] == idJog && valor[5] == idJog && valor[8] == idJog){
                // Verificando coluna direita
                ganhou = true;
            } else if(valor[0] == idJog && valor[4] == idJog && valor[8] == idJog){
                // Diagonal para direita
                ganhou = true;
            } else if(valor[2] == idJog && valor[4] == idJog && valor[6] == idJog){
                // Diagonal para esquerda
                ganhou = true;
            }
        }
        
        if(!ganhou){
            for(int i = 0; i < 9; i++){
                if(valor[i] == 0){
                    empatou = false;
                }
            }
        }
        
        if(ganhou && isJogador){
            return 1;
        } else if(ganhou && !isJogador){
            return 2;
        } else if(empatou){
            return 3;
        } else {
            return 0;
        }
    }
    
    private void atualizarCampos(){
        this.Aa.setText(lerValor(this.valor[0]));
        this.Ba.setText(lerValor(this.valor[1]));
        this.Ca.setText(lerValor(this.valor[2]));
        this.Ab.setText(lerValor(this.valor[3]));
        this.Bb.setText(lerValor(this.valor[4]));
        this.Cb.setText(lerValor(this.valor[5]));
        this.Ac.setText(lerValor(this.valor[6]));
        this.Bc.setText(lerValor(this.valor[7]));
        this.Cc.setText(lerValor(this.valor[8]));
    }
    
    private String lerValor(int valor){
        String resultado;
        switch(valor){
            case 1:
                resultado = "X";
                break;
            case 2:
                resultado = "O";
                break;
            default:
                resultado = "-";
                break;
        }
        
        return resultado;
    }
    
    private int geraMovimentoAleatorioComputador(){
        return new Random().nextInt(9);
    }
    
    private void realizarJogada(int campo){
        if(this.jogaCampo(campo, false)){
            if(verificaVitoria(true) != 3){
                if(verificaVitoria(true) != 1){
                    this.jogaCampo(this.vezComputador(), true);
                    if(this.verificaVitoria(false) == 2){
                        // Computador ganhou
                        JOptionPane.showMessageDialog(this, "O computador ganhou!", "DERROTA", JOptionPane.WARNING_MESSAGE);
                        this.derrotas++;
                        this.novoJogo(false);
                    }
                } else {
                    // Jogador ganhou
                    JOptionPane.showMessageDialog(this, "O jogador ganhou!", "VIT√ìRIA", JOptionPane.INFORMATION_MESSAGE);
                    this.vitorias++;
                    this.novoJogo(false);
                }
            } else {
                // Empatou
                JOptionPane.showMessageDialog(this, "Empatou!", "EMPATE", JOptionPane.PLAIN_MESSAGE);
                this.empates++;
                this.novoJogo(false);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Escolha outro campo!");
        }
    }
    
    private void novoJogo(boolean isMenu){
        if(!isMenu){
            this.primeiroMovimento = false;
            for(int i = 0; i < 9; i++){
                valor[i] = 0;
            }
            this.atualizarCampos();
        } else {
            if(primeiroMovimento){
                int confirma = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja iniciar um novo jogo?\n(ISSO CONTA COMO DERROTA NAS ESTAT√çSTICAS)", "CONFIRMA√á√ÉO", JOptionPane.YES_NO_OPTION);
                if(confirma == JOptionPane.YES_OPTION){
                    this.derrotas++;
                    this.primeiroMovimento = false;
                    for(int i = 0; i < 9; i++){
                        valor[i] = 0;
                    }
                    this.atualizarCampos();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Jogo n√£o foi inciado!", "ERRO", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Aa;
    private javax.swing.JLabel Ab;
    private javax.swing.JLabel Ac;
    private javax.swing.JLabel Ba;
    private javax.swing.JLabel Bb;
    private javax.swing.JLabel Bc;
    private javax.swing.JLabel Ca;
    private javax.swing.JLabel Cb;
    private javax.swing.JLabel Cc;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu mAjuda;
    private javax.swing.JMenuItem mAjudaSobre;
    private javax.swing.JMenu mJogo;
    private javax.swing.JMenuItem mJogoEstatisticas;
    private javax.swing.JMenuItem mJogoNovo;
    // End of variables declaration//GEN-END:variables
}
